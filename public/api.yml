openapi: 3.0.0
info:
  title: Rent Admin API
  description: Here goes description
  version: 0.1.9

servers:
  - url: http://localhost:8000/api
    description: local server

paths:
  /user:
    get:
      tags:
        - Administration
      summary: Returns a list of users.
      responses:
        '200': 
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string

  /v1/security/authenticate:
    post:
      summary: "Log in a user and generate a token"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
            example:
              username: "johndoe@example.com"
              password: "password123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  access_token:
                    type: "string"
                  user:
                    type: "string"
              example:
                access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                user: "user:{id:1,...}"

  /v1/security/registration:
    post:
      summary: "Create a new user"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                lastname:
                  type: "string"
                username:
                  type: "string"
                phone:
                  type: "string"
                dui:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
                password_confirmation:
                  type: "string"
                id_rol:
                  type: "integer"
                is_admin:
                  type: "boolean"
                active:
                  type: "integer"
            example:
              name: "John"
              lastname: "Doe"
              username: "johndoe"
              phone: "123-456-7890"
              dui: "01234567-8"
              email: "johndoe@example.com"
              password: "password123"
              password_confirmation: "password123"
              id_rol: 1
              is_admin: false
              active: 1
      responses:
        "201":
          description: "User created"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unprocessable entity"
        "500":
          description: "Internal server error"

  /v1/security/logout:
    post:
      summary: Logs out the currently authenticated user.
      operationId: logout
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No content.

  /v1/property/{id}/view:
    get:
      summary: View property details
      description: Returns the details of a specific property
      content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - Properties
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the property to view
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
        "401":
          description: "Unauthorized"

  /v1/property/pictures/store:
    post:
      summary: Add a picture to a property
      security:
        - bearerAuth: []
      tags:
        - Properties
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                property_id:
                  type: integer
                  description: The ID of the property to add the picture to
                  example: 123
                extension:
                  type: string
                  description: The extension of the picture
                  example: "jpg"
                property_picture:
                  type: string
                  description: The base64-encoded image file to upload (must be a valid image file)
                  example: "iVBORw0KGg...."
              required:
                - property_id
                - property_picture
                - extension
      responses:
        '200':
          description: Successfully added the picture to the property
        '422':
          description: Invalid request - missing required fields

  /v1/property/pictures/{id}/view:
    get:
      summary: View a property picture
      description: Retrieve and download a property picture by ID
      tags:
        - Properties
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the property picture to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Property picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      security:
        - bearerAuth: []

  /v1/dashboard/properties/add-new:
    post:
      summary: Create a new property
      tags:
        - Properties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                bedrooms:
                  type: integer
                beds:
                  type: integer
                bathrooms:
                  type: integer
                has_ac:
                  type: boolean
                has_kitchen:
                  type: boolean
                has_dinning_room:
                  type: boolean
                has_sink:
                  type: boolean
                has_fridge:
                  type: boolean
                has_tv:
                  type: boolean
                has_furniture:
                  type: boolean
                has_garage:
                  type: boolean
                active:
                  type: boolean
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Successfully created a new property
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request - Invalid input
        '401':
          description: Unauthorized - Missing or invalid API token

  /v1/dashboard/properties/list:
    get:
      summary: Get properties belonging to logged-in user
      tags:
        - Properties
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
        '400':
          description: Bad Request - Invalid input
        '401':
          description: Unauthorized - Missing or invalid API token

  /v1/dashboard/properties/create-new-lease:
    post:
      summary: Create a new lease agreement
      tags:
        - Properties
      security:
        - bearerAuth: []
      description: Creates a new lease agreement and a corresponding tenant record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                property_id:
                  type: integer
                  description: ID of the property being leased
                  example: 123
                rent_type_id:
                  type: integer
                  description: ID of the rent type
                  example: 1
                payment_date:
                  type: string
                  description: Date of monthly payment
                  example: "2023-04-01"
                expiration_date:
                  type: string
                  description: Date of lease expiration
                  example: "2024-03-31"
                price:
                  type: integer
                  description: Monthly rent price
                  example: 1000
                deposit:
                  type: integer
                  description: Security deposit amount
                  example: 2000
                tenant_name:
                  type: string
                  description: First name of the tenant
                  example: John
                tenant_lastname:
                  type: string
                  description: Last name of the tenant
                  example: Doe
                tenant_username:
                  type: string
                  description: Username of the tenant
                  example: johndoe
                tenant_phone:
                  type: string
                  description: Phone number of the tenant
                  example: "+1 (555) 123-4567"
                tenant_email:
                  type: string
                  description: Email address of the tenant
                  example: john.doe@example.com
      responses:
        '201':
          description: Lease agreement and tenant record created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  lease:
                    type: object
                    description: The newly created lease agreement
                  tenant:
                    type: object
                    description: The newly created tenant
        '400':
          description: Bad Request - Invalid input
        '401':
          description: Unauthorized - Missing or invalid API token
        '422':
          description: "Unprocessable entity"
        "500":
          description: "Internal server error"

  /v1/property/{id}/leases:
    get:
      summary: List LeaseAgreements
      operationId: listLeases
      security:
        - bearerAuth: []
      tags:
        - Properties
      parameters:
        - name: id
          in: path
          description: ID of the property to view
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of LeaseAgreements models and their related models.
          content:
            application/json:
              schema:
                type: object

  /v1/property/lease/{id}/details:
    get:
      summary: Retrieve lease details by ID
      tags:
        - Properties
      parameters:
        - name: id
          in: path
          description: ID of the lease to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      security:
        - bearerAuth: []

  /v1/payments/store-rent-payment:
    post:
      summary: Create a new payment
      tags:
        - Payments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lease_id:
                  type: integer
                payment_type_id:
                  type: integer
                payment:
                  type: number
              required:
                - lease_id
                - payment_type_id
                - payment
      responses:
        '201':
          description: Successfully created a new payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  lease_id:
                    type: integer
                  payment_type_id:
                    type: integer
                  payment:
                    type: number
                example:
                  id: 1
                  lease_id: 123
                  payment_type_id: 456
                  payment: 100.00
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: No se puede procesar la solicitud. Faltan campos

  /v1/payments/{id}/history:
    get:
      summary: Get payment history for a lease
      tags:
        - Payments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the lease agreement
          schema:
            type: integer
        - in: query
          name: page
          required: false
          description: Page number
          schema:
            type: integer
        - in: query
          name: per_page
          required: false
          description: Number of items per page
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No se puede procesar la solicitud. Faltan campos

  /v1/catalogs/rent-type/list:
    get:
      summary: "Get Rent Type Catalog"
      tags:
        - "Catalogs"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful operation"

  /v1/catalogs/payment-type/list:
    get:
      summary: "Get Payment Type Catalog"
      tags:
        - "Catalogs"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful operation"

  /v1/catalogs/document-type/list:
    get:
      summary: "Get Document Type Catalog"
      tags:
        - "Catalogs"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful operation"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT